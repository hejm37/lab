#! /usr/bin/env python2

import logging
import os
import multiprocessing
import subprocess
import sys

from lab.experiment import get_run_dir
from lab import tools

tools.configure_logging()

SHUFFLED_TASK_IDS = [92, 91, 40, 83, 7, 29, 58, 19, 104, 46, 97, 109, 74, 53, 50, 68, 49, 27, 4, 10, 18, 37, 78, 21, 108, 81, 42, 98, 84, 76, 35, 80, 28, 17, 11, 63, 106, 65, 48, 24, 20, 75, 2, 6, 61, 101, 102, 15, 105, 45, 39, 59, 99, 70, 66, 23, 93, 32, 82, 57, 64, 13, 73, 86, 77, 30, 9, 96, 31, 54, 110, 69, 89, 52, 41, 38, 3, 100, 72, 8, 71, 67, 1, 33, 16, 95, 47, 51, 36, 26, 55, 103, 56, 14, 62, 44, 60, 5, 25, 22, 94, 87, 43, 85, 107, 79, 88, 90, 12, 34]

# Make sure we're in the experiment directory.
os.chdir(os.path.dirname(os.path.abspath(__file__)))


def get_run_id(task_id):
    return SHUFFLED_TASK_IDS[task_id - 1]


def process_task(task_id):
    run_id = get_run_id(task_id)
    run_dir = get_run_dir(run_id)
    error = False
    with open(os.path.join(run_dir, 'driver.log'), 'w') as driver_log:
        with open(os.path.join(run_dir, 'driver.err'), 'w') as driver_err:
            logging.info('Starting run {run_id} (TASK_ID {task_id}) in {run_dir}'.format(**locals()))
            try:
                subprocess.check_call(['./run'], cwd=run_dir, stdout=driver_log, stderr=driver_err)
            except subprocess.CalledProcessError as err:
                error = True
    if os.path.getsize(driver_err.name) != 0:
        error = True
    for f in [driver_log, driver_err]:
        if os.path.getsize(f.name) == 0:
            os.remove(f.name)
    return error


def main():
    pool = multiprocessing.Pool(processes=8)
    num_tasks = len(SHUFFLED_TASK_IDS)
    result = pool.map_async(process_task, range(1, num_tasks + 1))
    try:
        # Use "timeout" to fix passing KeyboardInterrupts from children
        # (see https://stackoverflow.com/questions/1408356).
        result.wait(timeout=sys.maxint)
    except KeyboardInterrupt:
        logging.warning('Main script interrupted')
        pool.terminate()
    finally:
        pool.close()
        logging.info('Joining pool processes')
        pool.join()

    if any(result.get()):
        sys.exit("Error: At least one run failed.")


if __name__ == '__main__':
    main()
